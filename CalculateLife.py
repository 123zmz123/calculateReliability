import xlrd

from xlrd import *

import re



class Semiconductor_Intergrate_Reliability:
    environment_coefficient = {"GB": 1.0,  "GMS": 1.5, "GF1": 2.4, "GF2": 6.5,
                               "GM1": 6.3, "GM2": 11,  "MP": 6.8,  "NSB": 7.5,
                               "NS1": 4.5, "NS2": 10,  "NU": 14,   "AIF": 15,
                               "AUF": 20,  "AIC": 10,  "AUC": 13,  "ARW": 19,
                               "SF": 1.2,  "ML": 32,   "MF": 15}  # 环境系数
    environment_coefficient_result = environment_coefficient["GB"]

    quality_coefficient = {"A2": 0.08, "A3": 0.13, "A4": 0.25, "B1": 0.50,
                           "B2": 1.0, "C1": 3.0, "C2": 10

                           }   # 质量系数

    quality_coefficient_result = quality_coefficient["A2"]

    mature_coefficient = {"stable": 1.0, "unstable": 3.0, "new": 10.0

                          }  # 成熟系数

    mature_coefficient_result = mature_coefficient["stable"]
########################################################################################################################
    TC = {"GB": 35.0,  "GMS": 35.0, "GF1": 45.0, "GF2": 45.0,
          "GM1": 60.0, "GM2": 65.0,  "MP": 45.0,  "NSB": 50.0,
          "NS1": 45.0, "NS2": 50.0,  "NU": 75.0,   "AIF": 60.0,
          "AUF": 80.0,  "AIC": 60.0,  "AUC": 80.0,  "ARW": 60.0,
          "SF": 35.0,  "ML": 60.0,   "MF": 60.0
          }  # 管壳温度参考值

    TC_result = TC["GB"]

    Rth = {"SealedMetalCirclePackage": 70, "SealedMetalRhombusPackage": 6, "SealedDIP": 28,
           "SealedFlat": 22, "SealedCPGA": 20, "SealedCBGA": 15, "SealedSO": 20, "SealedLCC": 16,
           "UnSealedDIP": 63, "UnsealedFlat": 45, "UnsealedPGA": 38, "UnsealedBGA": 35, "UnsealedSO": 53,
           "UnsealedLCC": 30}  # 不同封装的管壳到结节热阻

    Rth_result = Rth["SealedFlat"]

    P = 0.036  # 元器件最大功耗

    def solve_tj(self):
        tj = self.TC_result + self.Rth_result * self.P

        if int(tj) in range(25, 175 + 1):
            tj = int(tj)
            if tj in range(25, 105 + 1):
                if tj % 2 == 1:
                    tj = tj
                else:
                    tj = tj - 1
            elif tj in range(106, 175 + 1):  # 处理 106 到 175 区间的事情
                if tj % 5 != 0:  # 如果在区间 （106， 175）之间无法被 5 整除 那么则 把tj 赋值为在此区间最近的能被 5 整除的 数
                    tj = tj + 5 - (tj % 5)
                else:
                    tj = tj

        else:
            print("Tj out of Range")
            return 888

        return tj
########################################################################################################################
    single_bipolar_digital_circuit_Temp_coefficient = {25: 0.1, 27: 0.11, 29: 0.12, 31: 0.14, 33: 0.15, 35:0.17, 37: 0.19, 39: 0.21, 41: 0.23, 43: 0.25,
                                                       45: 0.28, 47: 0.30, 49: 0.33, 51: 0.37, 53: 0.40, 55: 0.44, 57: 0.48, 59: 0.52, 61: 0.57, 63: 0.62,
                                                       65: 0.68, 67: 0.74, 69: 0.80, 71: 0.87, 73: 0.95, 75: 1.02, 77: 1.11, 79: 1.20, 81: 1.30, 83: 1.40,
                                                       85: 1.51, 87: 1.63, 89: 1.75, 91: 1.88, 93: 2.03, 95: 2.18, 97: 2.34, 99: 2.51, 101: 2.69, 103: 2.88,
                                                       105: 3.08, 110: 3.64, 115: 4.28, 120: 5.01, 125: 5.85, 130: 6.79, 135: 7.87, 140 : 9.08, 145: 10.44, 150: 11.97,
                                                       155: 13.67, 160: 15.57, 165: 17.69, 170: 20.03, 175: 22.62
                                                       }

    single_MOS_digital_circuit_Temp_coefficient = {25: 0.1, 27: 0.11, 29: 0.13, 31: 0.15, 33: 0.17, 35: 0.19, 37: 0.21, 39: 0.24, 41: 0.27, 43: 0.30,
                                                   45: 0.34, 47: 0.38, 49: 0.43, 51: 0.48, 53: 0.53, 55: 0.59, 57: 0.66, 59: 0.73, 61: 0.81, 63: 0.90,
                                                   65: 1.00, 67:1.10, 69: 1.22, 71: 1.35, 73: 1.48, 75: 1.68, 77: 1.80, 79: 1.97, 81: 2.17, 83: 2.38,
                                                   85: 2.60, 87: 2.85, 89: 3.11, 91: 3.40, 93: 3.71, 95: 4.04, 97: 4.40, 99: 4.78, 101: 5.20, 103 :5.65,
                                                   105: 6.12, 110: 7.48, 115: 9.09, 120: 10.99, 125: 13.23, 130: 15.85, 135: 18.90, 140 : 22.45, 145: 26.55, 150: 31.28,
                                                   155: 36.71, 160: 42.92, 165: 50.00, 170: 58.05, 175: 67.18
                                                   }
    single_analog_circuit_Temp_coefficient = {25: 0.1, 27: 0.12, 29: 0.14, 31: 0.16, 33: 0.19, 35: 0.23, 37: 0.27, 39: 0.31, 41: 0.36, 43: 0.42,
                                              45: 0.49, 47: 0.57, 49: 0.66, 51: 0.76, 53: 0.88, 55: 1.01, 57: 1.16, 59: 1.33, 61: 1.52, 63: 1.74,
                                              65: 1.99, 67: 2.27, 69: 2.58, 71: 2.94, 73: 3.33, 75: 3.78, 77: 4.27, 79: 4.83, 81: 5.45, 83: 6.14,
                                              85: 6.91, 87: 7.77, 89: 8.72, 91: 9.78, 93:10.95, 95: 12.25, 97: 13.68, 99: 15.26, 101: 17.01, 103: 18.93,
                                              105: 21.04, 110: 27.30, 115: 35.17, 120: 45.02, 125: 57.28, 130: 72.44, 135: 91.08, 140 : 113.89, 145: 141.66, 150: 175.28,
                                              155: 215.82, 160: 264.45, 165: 322.53, 170: 391.62, 175: 473.45
                                              }
    bipolar_micro_processor_Temp_coefficient = {25: 0.1, 27: 0.11, 29: 0.13, 31: 0.14, 33: 0.16, 35: 0.18, 37: 0.20, 39: 0.22, 41: 0.24, 43: 0.27,
                                                45: 0.30, 47: 0.33, 49: 0.37, 51: 0.41, 53: 0.45, 55: 0.50, 57: 0.55, 59: 0.60, 61: 0.66, 63: 0.72,
                                                65: 0.79, 67: 0.87, 69: 0.95, 71: 1.04, 73: 1.13, 75: 1.24, 77: 1.35, 79: 1.46, 81: 1.59, 83: 1.73,
                                                85: 1.88, 87: 2.04, 89: 2.20, 91: 2.39, 93:2.58, 95: 2.79, 97: 3.01, 99: 3.25, 101: 3.50, 103: 3.77,
                                                105: 4.06, 110: 4.86, 115: 5.79, 120: 6.87, 125: 8.11, 130: 9.55, 135: 11.19, 140: 13.06, 145: 15.19, 150: 17.60,
                                                155: 20.32, 160: 23.39, 165: 26.84, 170: 30.70, 175: 35.01
                                                }

    mos_micro_processor_Temp_coefficient =  {   25: 0.10, 27: 0.12, 29: 0.13, 31: 0.15, 33: 0.17, 35: 0.20, 37: 0.23, 39: 0.26, 41: 0.30, 43: 0.34,
                                                45: 0.38, 47: 0.44, 49: 0.49, 51: 0.56, 53: 0.63, 55: 0.71, 57: 0.80, 59: 0.89, 61: 1.00, 63: 1.12,
                                                65: 1.26, 67: 1.40, 69: 1.57, 71: 1.75, 73: 1.94, 75: 2.16, 77: 2.40, 79: 2.66, 81: 2.95, 83: 3.26,
                                                85: 3.60, 87: 3.98, 89: 4.39, 91: 4.83, 93: 5.32, 95: 5.84, 97: 6.42, 99: 7.04, 101: 7.72, 103: 8.45,
                                                105: 9.24, 110: 11.51, 115: 14.27, 120: 17.58, 125: 21.56, 130: 26.30, 135: 31.92, 140: 38.56, 145: 46.38, 150: 55.54,
                                                155: 66.23, 160: 78.66, 165: 93.05, 170: 109.65, 175: 128.75
                                                }
    bipolar_ROM_Temp_coefficient =             {25: 0.10, 27: 0.11, 29: 0.13, 31: 0.14, 33: 0.16, 35: 0.18, 37: 0.20, 39: 0.22, 41: 0.24, 43: 0.27,
                                                45: 0.30, 47: 0.33, 49: 0.37, 51: 0.41, 53: 0.45, 55: 0.50, 57: 0.55, 59: 0.60, 61: 0.66, 63: 0.72,
                                                65: 0.79, 67: 0.87, 69: 0.95, 71: 1.04, 73: 1.13, 75: 1.24, 77: 1.35, 79: 1.46, 81: 1.59, 83: 1.73,
                                                85: 1.88, 87: 2.04, 89: 2.20, 91: 2.39, 93: 2.58, 95: 2.79, 97: 3.01, 99: 3.25, 101: 3.50, 103: 3.77,
                                                105: 4.06, 110: 4.86, 115: 5.79, 120: 6.87, 125: 8.11, 130: 9.55, 135: 11.19, 140: 13.06, 145: 15.19, 150: 17.60,
                                                155: 20.32, 160: 23.39, 165: 26.84, 170: 30.70, 175: 35.01
                                                }

    mos_ROM_Temp_coefficient =                  {25: 0.10, 27: 0.12, 29: 0.13, 31: 0.15, 33: 0.17, 35: 0.20, 37: 0.23, 39: 0.26,
                                                 41: 0.30, 43: 0.34,
                                                 45: 0.38, 47: 0.44, 49: 0.49, 51: 0.56, 53: 0.63, 55: 0.71, 57: 0.80, 59: 0.89,
                                                 61: 1.00, 63: 1.12,
                                                 65: 1.26, 67: 1.40, 69: 1.57, 71: 1.75, 73: 1.94, 75: 2.16, 77: 2.40, 79: 2.66,
                                                 81: 2.95, 83: 3.26,
                                                 85: 3.60, 87: 3.98, 89: 4.39, 91: 4.83, 93: 5.32, 95: 5.84, 97: 6.42, 99: 7.04,
                                                 101: 7.72, 103: 8.45,
                                                 105: 9.24, 110: 11.51, 115: 14.27, 120: 17.58, 125: 21.56, 130: 26.30, 135: 31.92,
                                                 140: 38.56, 145: 46.38, 150: 55.54,
                                                 155: 66.23, 160: 78.66, 165: 93.05, 170: 109.65, 175: 128.75
                                                 }

    GaAs_MMIC_Temp_coefficient = {25: 0.10, 27: 0.123, 29: 0.151, 31: 0.185, 33: 0.226, 35: 0.275, 37: 0.334, 39: 0.405,
                                  41: 0.489, 43: 0.590,
                                  45: 0.709, 47: 0.852, 49: 1.020, 51: 1.218, 53: 1.452, 55: 1.728, 57: 2.051, 59: 2.430,
                                  61: 2.873, 63: 3.390,
                                  65: 3.992, 67: 4.692, 69: 5.505, 71: 6.446, 73: 7.534, 75: 8.664, 77: 9.963, 79: 11.458,
                                  81: 13.177, 83: 15.153,
                                  85: 17.426, 87: 20.040, 89: 23.046, 91: 26.503, 93: 30.478, 95: 35.050, 97: 40.308, 99: 46.354,
                                  101: 53.307, 103: 61.303,
                                  105: 70.498, 110: 81.073, 115: 93.234, 120: 107.219, 125: 128.663, 130: 154.395, 135: 185.274,
                                  140: 222.329, 145: 266.795, 150: 320.154,
                                  155: 384.184, 160: 461.021, 165: 533.226, 170: 663.871, 175: 796.645
                                  }

    temperature_coefficient = {"单片双极数字电路": single_bipolar_digital_circuit_Temp_coefficient, "单片MOS数字电路": single_MOS_digital_circuit_Temp_coefficient,
                               "单片模拟电路":single_analog_circuit_Temp_coefficient, "双极微处理器": bipolar_micro_processor_Temp_coefficient,
                               "MOS微处理器": mos_micro_processor_Temp_coefficient, "双极存储器": bipolar_ROM_Temp_coefficient, "MOS存储器":  mos_ROM_Temp_coefficient,
                               "GaAsMMIC电路": GaAs_MMIC_Temp_coefficient}


    voltage_coefficient = 1.0  # 电压应力系数并不完全

    p_rom_technological_coefficient = {}  # PROM 可编程工艺系数介绍不够清晰暂时不写






    NG_Number = 3000  #电路门数
    NT_Number = 500000  #晶体管数目
    C1_Position = 1
    C2_Position = 2
    single_bipolar_digital_circuit_Complexity_coefficient = {51: 0.1227, 52: 0.0100,101 :0.1574 , 102 :0.0121 ,201 :0.2021 , 202 :0.0146 ,301 :0.2338 ,
    302 :0.0163 ,401 :0.2593 , 402 :0.0177 ,501 :0.2810 , 502 :0.0188 ,601 :0.3001 , 602: 0.0197 ,701 :0.3172 , 702 :0.0206 ,801 :0.3328 , 802 :0.0214 ,901 :0.3473 , 902 :0.0221 ,1001 :0.3607 , 1002 :0.0227 ,
    3001 :0.5357 , 3002 :0.0307 ,5001 :0.6438 , 5002 :0.0354 ,7001 :0.7267 , 7002 :0.0388 ,9001 :0.7955 , 9002 :0.0416 ,10001 :0.8263 , 10002 :0.0428 ,20001 :1.0605 , 20002 :0.0518 ,30001 :1.2271 ,
    30002 :0.0579 ,40001 :1.3610 , 40002 :0.0627 ,50001 :1.4749 , 50002 :0.0666 ,60001 :1.5749 , 60002 :0.0701 }  # 单片双极数字电路的复杂度失效率

    single_mos_digital_circuit_Complexity_coefficient = {51:0.1064 , 52:0.0039 , 101 :0.1265 , 102 :0.0046 ,201: 0.1504 , 202 :0.0053 ,301 :0.1665 , 302 :0.0058 ,401 :0.1789 , 402 :0.0062 ,
501 :0.1891 , 502 :0.0066 ,601 :0.1980 , 602 :0.0068 ,701 :0.2057 , 702 :0.0071 ,801 :0.2127 , 802 :0.0073 ,901 :0.2191 , 902 :0.0075 ,
1001 :0.2249 , 1002 :0.0077 ,3001 :0.2960 , 3002 :0.0098 ,5001 :0.3364 , 5002 :0.0111 ,7001 :0.3659 , 7002 :0.0119 ,9001 :0.3896 , 9002 :0.0126 ,
10001 :0.4000 , 10002 :0.0129 ,20001 :0.4757 , 20002 :0.0152 ,30001 :0.5264 , 30002 :0.0166 ,40001 :0.5657 , 40002 :0.0177 ,50001 :0.5981 , 50002 :0.0187 ,
60001 :0.6260 , 60002 :0.0194 ,8001 :0.6727 , 80002 :0.0208 ,
100001 :0.7113 , 100002 :0.0218 ,300001 :0.9361 , 300002 :0.0280 ,500001 :1.0637 , 500002 :0.0315 ,700001 :1.1570 , 700002 :0.0340 ,900001 :1.2320 , 900002 :0.0360 ,
1000001 :1.2649 , 1000002 :0.0368 ,2000001: 1.5042 , 2000002: 0.0431 ,3000001: 1.6647 , 3000002: 0.0473 ,4000001 :1.7889 , 4000002 :0.0504 ,5000001 :1.8915 , 5000002 :0.0531 }  # 单片MOS数字电路复杂度失效率

    single_analog_circuit_Complexity_coefficient = {51:0.4272,52: 0.0406,101 : 0.6083 , 102 :0.0544 ,201 :0.8662 , 202 :0.0730 ,
301 :1.0651 , 302 :0.0866 ,401 :1.2335 , 402 :0.0978 ,501 :1.3821 , 502 :0.1075 ,601 :1.5168 , 602 :0.1162 ,701 :1.6408 , 702 :0.1240 ,801 :1.7565 , 802 :0.1312 ,901 :1.8652 , 902 :0.1379 ,
1001 :1.9681 , 1002 :0.1442 ,1201 :2.1599 , 1202 :0.1557 ,1401 :2.3366 , 1402 :0.1662 ,1601 :2.5012 , 1602 :0.1759 ,1801 :2.6560 , 1802 :0.1849 ,2001 :2.8027 , 2002 :0.1933 ,
2501 :3.1404 , 2502 :0.2124 ,3001 :3.4464 , 3002 :0.2294 ,3501 :3.7283 , 3502 : 0.2449,4001 :3.9910 , 4002 :0.2591 ,4501 :4.2381 , 4502 :0.2724 ,5001 :4.4720 , 5002 :0.2848 }  # 单片模拟电路复杂度失效率

    micro_processor_Complexity_coefficient = {101:0.2643, 102:0.0342, 501:0.5113, 502:0.0546, 1001:0.6793, 1002:0.0667,
                                              5001:1.3141, 5002:0.1064,
                                              10001:1.7461 , 10002 :0.1301 ,30001 :2.7396 , 30002 :0.1789 ,50001 :3.3778 , 50002 :0.2075 ,
                                              70001:3.8775 , 70002 :0.2287 ,90001 :4.2983 , 90002:0.2460
                                              }  # 微处理器的复杂度失效率

    mos_micro_processor_Complexity_coefficient = {101 :0.4427 , 102 :0.0260 ,501 :0.6620 , 502 :0.0376 ,
1001 :0.7873 , 1002 :0.0441 ,5001 :1.1773 , 5002 :0.0638 ,
10001 :1.4000 , 10002 :0.0749 ,30001 :1.8425 , 30002 :0.0964 ,50001 :2.0935 , 50002 :0.1084 ,70001 :2.2772 , 70002 :0.1171 ,90001 :4.3121 , 90002 :0.2107 ,
100001 :2.4896 , 100002 :0.1271 ,500001 :3.7228 , 500002 :0.1841 ,900001 :4.3121 , 900002 :0.2107 ,
1000001 : 4.4272, 1000002 : 0.2159 ,2000001 : 5.2648, 2000002 : 0.2532,3000001 : 5.8265 , 3000002 : 0.2780,4000001 : 6.2610, 4000002 :0.2970 ,5000001 :6.6202 , 5000002 : 0.3126,
6000001 : 6.9289, 6000002 : 0.3260, 7000001 : 7.2012, 7000002 : 0.3378, 8000001 : 7.4456, 8000002 : 0.3483 , 9000001 :7.6681 , 9000002 : 0.3579, 10000001 : 7.8728, 10000002 : 0.3665,
20000001 : 9.3624, 20000002 : 0.4300,40000001 : 11.1338, 40000002 : 0.5043, 60000001 : 12.3216, 60000002 :0.5536 ,80000001 :13.2404 , 80000002 :0.5915 ,100000001: 14.000 , 100000002 :0.6226 ,
120000001 : 14.6529, 120000002 :0.6493 ,140000001 :15.2286 , 140000002 :0.6727 ,160000001 : 15.7456, 160000002 : 0.6937,180000001 : 16.2161, 180000002 : 0.7128,200000001 : 16.6489,
200000002 : 0.7303,220000001 : 17.0504, 220000002 : 0.7464}  # MOS微处理器复杂度失效率

    bipolar_SRAM_Complexity_coefficient={}  # 双极SRAM的复杂度失效率

    MOS_SRAM_CCD_Complexity_coefficient={}  # MOS SRAM CCD器件的复杂度失效率

    bipolar_ROM_PROM_Complexity_coefficient={}  # 双极ROM PROM 器件的复杂度失效率

    MOS_ROM_PROM_Complexity_coefficient = {}  # MOS ROM PROM 器件的复杂度失效率

    MOS_DRAM_Complexity_coefficient = {}  # MOS DRAM 器件的复杂度失效率

    MOS_FIFO_Complexity_coefficient = {}  # MOS  FIFO 器件的复杂度失效率FIFO

    MOS_EPROM_EEPROM_UVEPROM_FLASH_Complexity_coefficient = {}  # MOS EEPROM  器件的复杂度失效率FIFO

    GaAs_MMIC_Complexity_coefficient = {}  # GaAs  器件的复杂度失效率FIFO

    Complexity_Coefficient_C1_C2 ={"单片双极数字电路":single_bipolar_digital_circuit_Complexity_coefficient,
                                   "单片MOS数字电路":single_mos_digital_circuit_Complexity_coefficient,
                                   "单片模拟电路":single_analog_circuit_Complexity_coefficient,
                                   " 微处理器":micro_processor_Complexity_coefficient,
                                   "MOS微处理器":mos_micro_processor_Complexity_coefficient,
                                   "双极SRAM":bipolar_SRAM_Complexity_coefficient,
                                   "MOS_SRAM":MOS_SRAM_CCD_Complexity_coefficient,
                                   "双极ROM_PROM":bipolar_ROM_PROM_Complexity_coefficient,
                                   "MOS_ROM_PROM":MOS_ROM_PROM_Complexity_coefficient,
                                   "MOS_DRAM":MOS_DRAM_Complexity_coefficient,
                                   "MOS_FIFO":MOS_FIFO_Complexity_coefficient,
                                   "MOS_EEPROM_AND":MOS_EPROM_EEPROM_UVEPROM_FLASH_Complexity_coefficient,
                                   "GaAs":GaAs_MMIC_Complexity_coefficient}






    def test(self):

       print(self.temperature_coefficient["MOS微处理器"][self.solve_tj()])





    Sealed_DIP_Package_Complexity_Coefficient = {4:0.01,6:0.0175,8 :0.0259,10 :0.0352,12 :0.0451,
                                                 14 :0.0558,16 :0.0669,18 :0.0787,20 :0.0909,22 :0.1036,24 :0.1167,
                                                 28: 0.1441,36:0.2033,40:0.2349,48:0.3016,64:0.4473,80:0.6072,100:0.8243 }  #密封DIP封装器件的封装复杂度失效率C3

    Sealed_FP_Package_Complexity_Coefficient = {3:0.0037,4: 0.0063, 6: 0.0132, 8: 0.0224, 10:0.0337, 12: 0.0470,
                                                 14: 0.0623, 16: 0.0796, 18: 0.0987, 20: 0.1197, 22: 0.1425, 24: 0.1670,
                                                 28: 0.2214, 36: 0.3506, 40: 0.4251, 48: 0.5933, 64: 1.0040, 80: 1.5099,
                                                 100: 2.2708, 120:3.1693,140:4.2013,280:14.9226}  # 密封扁平封装器件的封装复杂度失效率C3

    Sealed_BGA_PGA_and_Other_Package_Complexity_Coefficient = {4: 0.0174, 6: 0.0283, 8: 0.0400, 10: 0.0523, 12: 0.0651,
                                                14: 0.0783, 16: 0.0919, 18: 0.1059, 20: 0.1202, 22: 0.1347, 24: 0.1495,
                                                28: 0.1799, 36: 0.2433, 40: 0.2760, 48: 0.3436, 64: 0.4852, 80: 0.6342,
                                                100: 0.8289, 120: 1.0316, 140: 1.2413, 280: 2.8517, 320: 3.3473,
                                                400: 4.3751, 500: 5.7184
                                               }  # 密封插接阵列封装器件的封装复杂度失效率C3

    Sealed_Surface_Package_Complexity_Coefficient = {4: 0.0372, 6: 0.0605, 8: 0.0855, 10: 0.1117, 12: 0.1391,
                                                               14: 0.1673, 16: 0.1964, 18: 0.2262, 20: 0.2567,
                                                               22: 0.2878, 24: 0.3195,
                                                               28: 0.3844, 36: 0.5197, 40: 0.5897, 48: 0.7340,
                                                               64: 1.0366, 80: 1.3549,
                                                               100: 1.7709, 120: 2.2040, 140: 2.6518, 280: 6.0923,
                                                               320: 7.1510,
                                                     }  # 密封表面安装封装器件的封装复杂度失效率C3

    Sealed_Metal_Back_Package_Complexity_Coefficient = {2: 0.0016, 3: 0.0032, 4: 0.0053, 6: 0.0105, 8: 0.0171,
                                                        10: 0.0251, 12: 0.0342,
                                                        14: 0.0444, 16: 0.0557, 18: 0.0681, 20: 0.0814,
                                                        22: 0.0957, 24: 0.1110,
                                                        }  # 密封金属壳封装器件的封装复杂度失效率C3

    Unsealed_DIP_Package_Complexity_Coefficient = {4: 0.013, 6: 0.0227, 8: 0.0337, 10: 0.0457, 12: 0.0587,
                                                   14: 0.0725, 16: 0.0870, 18: 0.1023, 20: 0.1182, 22: 0.1346, 24: 0.1517,
                                                   28: 0.1873, 36: 0.2643, 40: 0.3054, 48: 0.3920, 64: 0.5814, 80: 0.7893,
                                                   100: 1.0716}  # 非密封DIP封装器件的封装复杂度失效率C3

    Unsealed_FP_Package_Complexity_Coefficient = {3: 0.0056, 4: 0.0095, 6: 0.0199, 8: 0.0336, 10: 0.0505, 12: 0.0705,
                                                  14: 0.0935, 16: 0.1194, 18: 0.1481, 20: 0.1795, 22: 0.2137, 24: 0.2506,
                                                  28: 0.3322, 36: 0.5259, 40: 0.6377, 48: 0.8900, 64: 1.5061, 80: 2.2649,
                                                  100: 3.4061, 120: 4.7539, 140: 6.3019,
                                                  280: 22.3838
                                                 }  # 非密封扁平封装器件的封装复杂度失效率C3

    Unsealed_BGA_PGA_and_Other_Package_Complexity_Coefficient = {4: 0.0230, 6: 0.0373, 8: 0.0527, 10: 0.0689, 12: 0.0858,
                                                               14: 0.1032, 16: 0.1212, 18: 0.1396, 20: 0.1584,
                                                               22: 0.1776, 24: 0.1971,
                                                               28: 0.2372, 36: 0.3207, 40: 0.3639, 48: 0.4529,
                                                               64: 0.6396, 80: 0.8360,
                                                               100: 1.0927, 120: 1.3599, 140: 1.6362, 280: 3.7591,
                                                               320: 4.4123,
                                                               400: 5.7671, 500: 7.5830
                                                               }  # 非密封插接阵列封装器件的封装复杂度失效率C3

    Unsealed_Surface_Package_Complexity_Coefficient = {4: 0.0483, 6: 0.0786, 8: 0.111, 10: 0.145, 12: 0.1805,
                                                       14: 0.2172, 16: 0.2549, 18: 0.2936, 20: 0.3332,
                                                       22: 0.3735, 24: 0.4146,
                                                       28: 0.4989, 36: 0.6745, 40: 0.7654, 48: 0.9526,
                                                       64: 1.3454, 80: 1.7584,
                                                       100: 2.2984, 120: 2.8605, 140: 3.4417, 280: 7.9070,
                                                       320: 9.2811
                                                      }  # 非密封表面安装封装器件的封装复杂度失效率C3

    Complexity_coefficient_C3 = {"密封DIP封装": Sealed_DIP_Package_Complexity_Coefficient,
                                         "密封扁平封装": Sealed_FP_Package_Complexity_Coefficient,
                                         "密封接插阵列封装": Sealed_BGA_PGA_and_Other_Package_Complexity_Coefficient,
                                         "密封表面安装封装": Sealed_Surface_Package_Complexity_Coefficient,
                                         "密封金属壳封装": Sealed_Metal_Back_Package_Complexity_Coefficient,
                                         "非密封DIP封装": Unsealed_DIP_Package_Complexity_Coefficient,
                                         "非密封扁平封装": Unsealed_FP_Package_Complexity_Coefficient,
                                         "非密封插接阵列封装":  Unsealed_BGA_PGA_and_Other_Package_Complexity_Coefficient,
                                         "非密封表面安装封装": Unsealed_Surface_Package_Complexity_Coefficient
                                         }  # 封装复杂度列表

    def solve_lambda_of_micro_processor(self):

        step1 = self.Complexity_Coefficient_C1_C2["MOS微处理器"][self.NT_Number + self.C1_Position]/1000000 *\
                self.temperature_coefficient["MOS微处理器"][ self.solve_tj()] * self.voltage_coefficient

        step2 = (self.Complexity_Coefficient_C1_C2["MOS微处理器"][self.NT_Number + self.C2_Position] +\
                 self.Complexity_coefficient_C3["密封扁平封装"][64])/1000000 * \
                 self.environment_coefficient_result

        step3 = self.mature_coefficient_result * (step1 + step2) * self.quality_coefficient_result

        return step3

    def __init__(self,):
        return

class 电阻可靠性模型:

#=============================== 各种电阻器的环境系数===========================================

    __合成电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.1, "GF2": 3.5,
                                                   "GM1": 5.0, "GM2": 6.5, "MP":5.8, "NSB": 4.0,
                                                   "NS1": 3.0, "NS2": 5.0, "NU": 10, "AIF": 5.0,
                                                   "AUF": 10.5, "AIC": 3.8, "AUC": 6.7, "ARW": 11.9,
                                                   "SF": 1.0, "ML": 25, "MF": 15}  # 合成电阻环境系数
    __金属膜电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.8, "GF2": 3.0,
                                                     "GM1": 4.0, "GM2": 6.0, "MP": 5.6, "NSB": 3.8,
                                                     "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                                                     "AUF": 11, "AIC": 2.5, "AUC": 6.1, "ARW": 12.5,
                                                     "SF": 0.5, "ML": 26, "MF": 15}  # 金属膜电阻环境系数
    __碳膜电阻环境系数 = {"GB": 1.0, "GMS": 1.5, "GF1": 1.8, "GF2": 3.0,
                                                     "GM1": 4.0, "GM2": 6.0, "MP": 5.6, "NSB": 3.8,
                                                     "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                                                     "AUF": 11, "AIC": 2.5, "AUC": 6.1, "ARW": 12.5,
                                                     "SF": 0.50, "ML": 26, "MF": 15}  # 碳膜电阻环境系数
    __线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.1, "GF2": 3.5,
                                                     "GM1": 4.5, "GM2": 8.0, "MP": 7.5, "NSB": 4.5,
                                                     "NS1": 3.0, "NS2": 5.0, "NU": 12, "AIF": 6.0,
                                                     "AUF": 13, "AIC": 5.6, "AUC": 10.5, "ARW": 14.7,
                                                     "SF": 1.0, "ML": 34, "MF": 15}  # 线绕电阻环境系数
    __功率线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.5, "GF2": 3.0,
                              "GM1": 4.0, "GM2": 6.5, "MP": 6.8, "NSB": 4.2,
                              "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                              "AUF": 12, "AIC": 2.7, "AUC": 6.0, "ARW": 13.6,
                              "SF": 1.0, "ML": 30, "MF": 15}  # 功率线绕电阻环境系数
    __功率非线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.8, "GF2": 3.0,
                              "GM1": 4.0, "GM2": 6.5, "MP": 6.6, "NSB": 4.0,
                              "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                              "AUF": 12, "AIC": 4.0, "AUC": 9.4, "ARW": 14,
                              "SF": 1.0, "ML": 30, "MF": 15}  # 功率非线绕电阻环境系数
    __热敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                              "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                              "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                              "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                              "SF": 1.0, "ML": 35, "MF": 15}  # 热敏电阻环境系数
    __压敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                              "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                              "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                              "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                              "SF": 1.0, "ML": 35, "MF": 15}  # 压敏电阻环境系数
    __光敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                              "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                              "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                              "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                              "SF": 1.0, "ML": 35, "MF": 15}  # 压敏电阻环境系数
    __片式膜电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.0, "GF2": 3.2,
                              "GM1": 5.2, "GM2": 6.7, "MP": 6.1, "NSB": 4.5,
                              "NS1": 2.8, "NS2": 5.0, "NU": 10, "AIF": 6.6,
                              "AUF": 11.5, "AIC": 3.4, "AUC": 6.4, "ARW": 14.3,
                              "SF": 0.5, "ML": 29, "MF": 15}  # 片式膜电阻环境系数
                                                            #  线绕电阻器环境系数未填写
                                                            #  功率线绕电阻器环境系数未填写
                                                            #  功率非线绕电阻器环境系数未填写
                                                            #  热敏电阻器环境系数未填写
                                                            #  压敏电阻器环境系数未填写
                                                            #  光敏电阻器环境系数未填写
                                                            #  片式膜电阻器环境系数未填写
    __电阻环境系数 ={"合成电阻环境系数":__合成电阻环境系数,
                     "金属膜电阻环境系数":__金属膜电阻环境系数,
                     "碳膜电阻环境系数":__碳膜电阻环境系数,
                     "线绕电阻环境系数":__线绕电阻环境系数,
                     "功率线绕电阻环境系数":__功率线绕电阻环境系数,
                     "功率非线绕电阻环境系数":__功率非线绕电阻环境系数,
                     "热敏电阻环境系数":__热敏电阻环境系数,
                     "压敏电阻环境系数":__压敏电阻环境系数,
                     "光敏电阻环境系数":__光敏电阻环境系数,
                     "片式膜电阻环境系数":__片式膜电阻环境系数,
                    }

    __电阻环境系数结果 = __电阻环境系数["金属膜电阻环境系数"]["GB"]


# =============================== 各种电阻器阻值系数============================================

    __合成电阻阻值系数 = {"100K以下":1.0,
                                             "100K到1M":1.6,
                                             "1M到10M":3.0,
                                             "大于10M":4.5}  #合成电阻的阻值系数

    __金属膜电阻阻值系数 = {"100K以下":1.0,
                                               "100K到1M":1.6,
                                               "1M到10M":3.0,
                                               "大于10M":4.5}  #金属膜电阻的阻值系数

    __碳膜电阻阻值系数 = {"100K以下":1.0,
                          "100K到1M":1.6,
                          "1M到10M":3.0,
                          "大于10M":4.2}  #碳膜电阻的阻值系数
    __线绕电阻阻值系数 = {"小于10k": 1.0,
                          "10K到100K":1.5,
                          "100K到1M":3.5,
                          "1M到10M":6.0,
                          "大于10M":8.0}  #线绕电阻的阻值系数
    __功率线绕电阻阻值系数 = {"100到1k": 1.0,
                              "1K到10K":1.4,
                              "10K到150k":2.0,
                              "大于150k":2.5,
                          }  #功率线绕电阻的阻值系数
    __功率非线绕电阻阻值系数 = {"10到100": 1.0,
                                "100到10K":1.2,
                                "10K到100k":1.7,
                                "100k到1M":2.4,
                                "1M到10M":5.0,
                                "大于10M": 7.0
                          }  #功率非线绕电阻的阻值系数
    __片式膜电阻阻值系数 = {"小于100K": 1.0,
                                "100K到1M":1.6,
                                "大于1M":2.0,

                          }  #片式膜电阻的阻值系数

    #  还有其他类型电阻的阻值系数并没有写全 不过这些用的不多 以后可以增加
    __电阻阻值系数 = {"合成电阻阻值系数":__合成电阻阻值系数,
                      "金属膜电阻阻值系数":__金属膜电阻阻值系数,
                      "碳膜电阻阻值系数":__碳膜电阻阻值系数,
                      "线绕电阻阻值系数":__线绕电阻阻值系数,
                      "功率线绕电阻阻值系数":__功率线绕电阻阻值系数,
                      "功率非线绕电阻阻值系数":__功率非线绕电阻阻值系数,
                      "片式膜电阻阻值系数":__片式膜电阻阻值系数}

    __电阻阻值系数结果 = __电阻阻值系数["金属膜电阻阻值系数"]["100K以下"]
# ============================= 各种电阻的质量系数===============================================
    __合成电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}

    __金属膜电阻质量系数 = {"A1P": 0.05, "A1M": 0.10, "A2": 0.30, "B1": 0.60, "B2": 1.0, "C": 4.0}

    __碳膜电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}

    __线绕电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}

    __功率线绕电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}

    __功率非线绕电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}

    __热敏电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}

    __压敏电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}

    __光敏电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}

    __片式膜电阻质量系数 = {"A1P": 0.05, "A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}

    __电阻质量系数 = {"合成电阻质量系数": __合成电阻质量系数,
                      "金属膜电阻质量系数": __金属膜电阻质量系数,
                      "碳膜电阻质量系数": __碳膜电阻质量系数,
                      "线绕电阻质量系数":__线绕电阻质量系数,
                      "功率线绕电阻质量系数":__功率线绕电阻质量系数,
                      "功率非线绕电阻质量系数":__功率非线绕电阻质量系数,
                      "热敏电阻质量系数":__热敏电阻质量系数,
                      "压敏电阻质量系数":__压敏电阻质量系数,
                      "光敏电阻质量系数": __光敏电阻质量系数,
                      "片式膜电阻质量系数": __片式膜电阻质量系数}

    __电阻质量系数结果 = __电阻质量系数["金属膜电阻质量系数"]["A2"]
# ============================各种电阻基本失效率====================================================

    __合成电阻基本失效率05 = {0: 0.0008, 5: 0.0010, 10: 0.0012, 15: 0.0014, 20: 0.0017,
                                                          25: 0.0021, 30: 0.0025, 35: 0.0031, 40: 0.0037, 45: 0.0045,
                                                          50: 0.0054, 55: 0.0066, 60: 0.0079, 65: 0.0096, 70: 0.0116,
                                                          75: 0.0140, 80: 0.0170, 85: 0.0205, 90: 0.0248, 95: 0.0300,
                                                          100: 0.0363}  # 此处所有的都是基于 实际功率为额定功率的 0.5倍


    __金属膜电阻基本失效率05 = {0: 0.0011, 5: 0.0011, 10: 0.0012, 15: 0.0013, 20: 0.0014,
                                                            25: 0.0015, 30: 0.0016, 35: 0.0017, 40: 0.0019, 45: 0.0020,
                                                            50: 0.0022, 55: 0.0023, 60: 0.0025, 65: 0.0027, 70: 0.0028,
                                                            75: 0.0031, 80: 0.0033, 85: 0.0035, 90: 0.0038, 95: 0.0040,
                                                            100: 0.0043}

    __碳膜电阻基本失效率05 = {0: 0.0057, 5: 0.0058, 10: 0.0060, 15: 0.0062, 20: 0.0064,
                                                             25: 0.0067, 30: 0.0069, 35: 0.0072, 40: 0.0074, 45: 0.0074,
                                                             50: 0.0077, 55: 0.0080, 60: 0.0087, 65: 0.0091, 70: 0.0095,
                                                             75: 0.010, 80: 0.0105, 85: 0.0110, 90: 0.0116, 95: 0.0122,
                                                             }

    __线绕电阻基本失效率05 ={0: 0.0402, 5: 0.0415, 10: 0.0429, 15: 0.0445, 20: 0.0463,
                             25: 0.0484, 30: 0.0508, 35: 0.0537, 40: 0.0570, 45: 0.0610,
                             50: 0.0656, 55: 0.0712, 60: 0.0780, 65: 0.0862, 70: 0.0962,
                             75: 0.1087, 80: 0.1245, 85: 0.1444, 90: 0.1702, 95: 0.2040,100:0.2489}

    __功率线绕电阻基本失效率05 = {0: 0.0553, 10: 0.0607, 20: 0.0667, 30: 0.0736, 20: 0.0463,
                             25: 0.0484, 30: 0.0508, 35: 0.0537, 40: 0.0570, 45: 0.0610,
                             50: 0.0656, 55: 0.0712, 60: 0.0780, 65: 0.0862, 70: 0.0962,
                             75: 0.1087, 80: 0.1245, 85: 0.1444, 90: 0.1702, 95: 0.2040,100:0.2489}

    __电阻基本失效率_S05 = {"合成电阻基本失效率": __合成电阻基本失效率05,
                            "金属膜电阻基本失效率":__金属膜电阻基本失效率05,
                            "碳膜电阻基本失效率": __碳膜电阻基本失效率05}

    __电阻基本失效率结果 =__电阻基本失效率_S05["金属膜电阻基本失效率"][60]
# ================================================计算金属膜电阻失效率=======================================================
    def 得到可靠性(self):
        step1 = self.__电阻基本失效率结果/1000000 * \
                self.__电阻环境系数结果
        step2 = self.__电阻质量系数结果 * self.__电阻阻值系数结果

        step3 = step1 * step2

        return step3

    def __解析电阻类型(self, 电阻类型):
        if re.search("金", str(电阻类型)):
            return "金属膜电阻"
        elif re.search("碳", str(电阻类型)):
            return "碳膜电阻"
        elif re.search("合", str(电阻类型)):
            return "合成电阻"
        else:
            print("请核对电阻类型")

    def __解析阻值(self,电阻值):
        if re.search("k",电阻值) or re.search('K',电阻值):
            电阻值计算结果 = int(re.match(r'\d+',电阻值).group())*1000

        elif re.search("m",电阻值) or re.search('M',电阻值):
            电阻值计算结果 = int(re.match(r'\d+',电阻值).group())*1000000
        else:
            电阻值计算结果 = int(re.match(r'\d+',电阻值).group())

        if 电阻值计算结果 <= 100000:
            return "100K以下"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果<=1000000:
            return "100K到1M"
        elif 电阻值计算结果 > 1000000 and 电阻值计算结果<=10000000:
            return "1M到10M"
        elif 电阻值计算结果 > 10000000 :
            return "大于10M"





    def __init__(self, 电阻类型="", 环境类型="", 电阻值="",工作温度 = 0):

        __电阻类型结果 = self.__解析电阻类型(电阻类型)
        __电阻值结果 = self.__解析阻值(电阻值)
        self.__电阻环境系数结果 = self.__电阻环境系数[__电阻类型结果+"环境系数"]\
            [环境类型]
        self.__电阻阻值系数结果 = self.__电阻阻值系数[__电阻类型结果+"阻值系数"]\
            [__电阻值结果]

        self.__电阻质量系数结果 = self.__电阻质量系数[__电阻类型结果+"质量系数"]\
        ["A1M"]

        self.__电阻基本失效率结果 = self.__电阻基本失效率_S05[__电阻类型结果+"基本失效率"]\
        [工作温度]


class Capacitor_Reliability:

    电容类型 = ""
    工作温度 = 30
    环境类型 = "GB"
    电容容量 = ""


    表面贴片封装系数 = {"一类陶瓷电容_片式": 1.5, "一类陶瓷电容_有引线": 1.0,
                        "二类陶瓷电容_片式": 1.5, "二类陶瓷电容_有引线": 1.0,
                        "三类陶瓷电容_片式": 1.5, "三类陶瓷电容_有引线": 1.0,
                        "固体钽电解电容_片式": 1.2, "固体钽电解电容_有引线": 1.0,
                        "铝电解电容_片式": 1.2, "铝电解电容_有引线": 1.0,
                        "薄膜电容_片式": 1.2, "薄膜电容_有引线": 1.0}

    一类陶瓷电容环境系数 = {"GB": 1.0,"GMS": 1.2, "GF1": 2.4, "GF2": 4.1, "GM1": 4.6, "GM2": 7.6,
                        "MP": 7.0, "NSB": 4.0, "NS1": 2.3, "NS2": 4.7, "NU": 10.2, "AIF": 6.7,
                        "AUF": 12, "AIC": 3.4, "AUC": 7.5, "ARW": 10.5, "SF": 1.0, "ML": 17,
                        "MF": 8}
    一类陶瓷电容基本失效率 = {0: 0.0030, 5: 0.0035, 10: 0.0041, 15: 0.0048, 20: 0.0056, 25: 0.0066, 30: 0.0077,
                          35: 0.0089, 40: 0.0104, 45: 0.0121, 50: 0.1401, 55: 0.0165, 60: 0.0192, 65: 0.0224,
                          70: 0.0261, 75: 0.0305, 80: 0.0356, 85: 0.0415
                          }  # 基于S = 0.5 条件下进行计算所得到的数据
    一类陶瓷电容质量等级 = {"A1P": 0.03, "A1M": 0.1, "A2": 0.3, "B1": 0.5, "B2": 1, "C": 5
                        }
    一类陶瓷电容容量系数 = {"小于7.5pF": 0.50, "7.5pF到91pF": 0.75, "91pF到470pF": 1.0, "470pF到2000pF": 1.3,
                            "2000pF到0.0062uF": 1.6, "0.0062uF到0.016uF": 1.9, "0.016uF到0.039uF": 2.2,
                            "大于0.039uF": 2.4}

    二类陶瓷电容环境系数 = {"GB": 1.0, "GMS": 1.2, "GF1": 2.8, "GF2": 4.6, "GM1": 5.1, "GM2": 8.1, "MP": 7.0, "NSB": 4.9,
                            "NS1": 2.9, "NS2": 5.7, "NU": 9.1, "AIF": 7.7, "AUF": 14, "AIC": 6.0, "AUC": 10.2,
                            "ARW": 12, "SF": 1.0, "ML": 17, "MF": 8}
    二类陶瓷电容基本失效率 = {0: 0.00748, 5: 0.00759, 10: 0.00769, 15: 0.00780, 20: 0.00791, 25: 0.00802, 30: 0.00814,
                              35: 0.00825, 40: 0.00837, 45: 0.00848, 50: 0.00860, 55: 0.00873, 60: 0.00885, 65: 0.00897,
                              70: 0.00910, 75: 0.00923, 80: 0.00936, 85: 0.00949
                              }  # 基于S = 0.5 条件下进行计算所得到的数据
    二类陶瓷电容质量等级 = {"A1P": 0.03, "A1M": 0.1, "A2": 0.3, "B1": 0.5, "B2": 1, "C": 5
                  }
    二类陶瓷电容容量系数 = {"小于240pF": 0.50, "240pF到0.0033uF": 0.75, "0.0033uF到0.016uF": 1.0,
                            "0.016uF到0.082uF": 1.3, "0.082uF到0.27uF": 1.6, "0.27uF到0.75uF": 1.9,
                            "0.75uF到1.8uF": 2.2, "大于1.8uF": 2.4}

    三类陶瓷电容环境系数 = {"GB": 1.0, "GMS": 1.2, "GF1": 2.4, "GF2": 4.8, "GM1": 4.85, "GM2": 7.9, "MP": 7.0, "NSB": 4.9,
                            "NS1": 2.6, "NS2": 5.0, "NU": 9.6, "AIF": 7.2, "AUF": 13, "AIC": 4.4, "AUC": 8.7,
                            "ARW": 11, "SF": 1.0, "ML": 17, "MF": 8.0}
    三类陶瓷电容基本失效率 = {0: 0.0045, 5: 0.0049, 10: 0.0054, 15: 0.0060, 20: 0.0066, 25: 0.0073, 30: 0.0080,
                              35: 0.0088, 40: 0.0097, 45: 0.0107, 50: 0.0118, 55: 0.0130, 60: 0.0144, 65: 0.0159,
                              70: 0.0175, 75: 0.0193, 80: 0.0213, 85: 0.0235
                              }  # 基于S = 0.5 条件下进行计算所得到的数据
    三类陶瓷电容质量等级 = { "A": 0.3, "B1": 0.5, "B2": 1, "C": 5
                  }
    三类陶瓷电容容量系数 = {"小于50pF": 0.51, "50pF到240pF": 0.62, "240pF到0.0033uF": 0.85,
                            "0.0033uF到0.016uF": 1.00, "0.016uF到0.082uF": 1.24, "0.082uF到0.27uF": 1.44,
                            "0.27uF到0.75uF": 1.62,
                            "0.75uF到1.8uF": 1.80, "大于1.8uF": 2.20}

    固体钽电解电容环境系数 = {"GB": 1.0, "GMS": 1.2, "GF1": 2.4, "GF2": 3.5, "GM1": 3.5, "GM2": 6.5, "MP": 6.0, "NSB":3.8,
                            "NS1": 2.3, "NS2": 4.5, "NU": 8.5, "AIF": 8.3, "AUF": 15, "AIC": 5.5, "AUC": 8.0,
                            "ARW": 12, "SF": 1.0, "ML": 19, "MF": 9}
    固体钽电解电容基本失效率 = {0: 0.0085, 5: 0.0089, 10: 0.0093, 15: 0.0098, 20: 0.0104, 25: 0.0112, 30: 0.0121,
                                35: 0.0133, 40: 0.0148, 45: 0.0166, 50: 0.0190, 55: 0.0222, 60: 0.0263, 65: 0.0320,
                                70: 0.0398, 75: 0.0509, 80: 0.0671, 85: 0.0914, 90: 0.1292, 95: 0.1901,100: 0.2923,
                                105: 0.4718
                              }  # 基于S = 0.5 条件下进行计算所得到的数据
    固体钽电解电容质量等级 = {"A1P": 0.03,"A1M": 0.1, "A2": 0.3, "B1": 0.5, "B2": 1, "C": 5
                  }
    固体钽电解电容容量系数 = {"小于0.47uF": 0.50, "0.47uF到3.3uF": 0.75, "3.3uF到15uF": 1.0,
                            "15uF到47uF": 1.3, "47uF到100uF": 1.6, "100uF到220uF": 1.9,
                            "220uF到500uF": 2.2,
                            "大于500uF": 2.6}
    固体钽电解电容电阻系数 = {"大于3": 0.07, "2到3": 0.1, "1到2": 0.2, "0.8到1": 0.3, "0.6到0.8": 0.4, "0.4到0.6": 0.6,
                              "0.2到0.4": 0.8, "小于0.2": 1.0}
    # 非固体钽电解电容器还未写
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    铝电解电容环境系数 = {  "GB": 1.0, "GMS": 1.2, "GF1": 2.4, "GF2": 4.0, "GM1": 4.2, "GM2": 10.4, "MP": 9.0, "NSB":5.1,
                            "NS1": 3.0, "NS2": 6.1, "NU": 12.7, "AIF": 11.8, "AUF": 21, "AIC": 9.0, "AUC": 15,
                            "ARW": 18, "SF": 1.0, "ML": 21, "MF": 10}
    铝电解电容基本失效率 = {0: 0.028, 5: 0.0308, 10: 0.0341, 15: 0.0381, 20: 0.0430, 25: 0.0490, 30: 0.0565,
                                35: 0.0660, 40: 0.0781, 45: 0.0936, 50: 0.1139, 55: 0.1407, 60: 0.1767, 65: 0.2258,
                                70: 0.2940, 75: 0.3902, 80: 0.5288, 85: 0.7324,
                            }  # 基于S = 0.5 条件下进行计算所得到的数据
    铝电解电容质量等级 = {"A1L": 0.03,"A1W": 0.1, "A2": 0.3, "B1": 0.5, "B2": 1, "C": 5
                  }
    铝电解电容容量系数 = {"小于1uF": 0.40, "1uF到20uF": 0.70, "20uF到100uF": 1.0,
                            "100uF到470uF": 1.3, "470uF到1500uF": 1.6, "1500uF到3000uF": 1.9,
                            "3000uF到6800uF": 2.2,"6800uF到10000uF":2.5, "10000uF到20000uF":2.8,
                            "大于20000uF": 3.0}

    def 得到可靠性(self):
        if self.电容类型 == "":
            print("设备未能正确初始化")

        elif self.电容类型 == "固体钽电解电容":
            step1 = self.固体钽电解电容基本失效率[self.工作温度] / 1000000 * \
                    self.固体钽电解电容环境系数[self.环境类型]
            step2 = self.固体钽电解电容质量等级["B1"] * \
                    self.固体钽电解电容容量系数[self.电容容量]
            step3 = self.固体钽电解电容电阻系数["小于0.2"]* \
                    self.表面贴片封装系数["固体钽电解电容_有引线"]
            step4 = step1 * step2 * step3

            return  step4

        elif self.电容类型 == "一类陶瓷电容":
            step1 = self.一类陶瓷电容基本失效率[self.工作温度]/1000000 * \
                    self.一类陶瓷电容环境系数[self.环境类型]
            step2 = self.一类陶瓷电容质量等级["A1P"] * \
                    self.一类陶瓷电容容量系数[self.电容容量]
            step3 = step1 * step2 * self.表面贴片封装系数["一类陶瓷电容_片式"]

            return  step3
        elif self.电容类型 == "二类陶瓷电容":
            step1 = self.二类陶瓷电容基本失效率[self.工作温度] / 1000000 * \
                    self.二类陶瓷电容环境系数[self.环境类型]
            step2 = self.二类陶瓷电容质量等级["A1P"] * \
                    self.二类陶瓷电容容量系数[self.电容容量]
            step3 = step1 * step2 * self.表面贴片封装系数["二类陶瓷电容_片式"]

            return step3
        elif self.电容类型 == "三类陶瓷电容":
            step1 = self.三类陶瓷电容基本失效率[self.工作温度] / 1000000 * \
                    self.三类陶瓷电容环境系数[self.环境类型]
            step2 = self.三类陶瓷电容质量等级["A"] * \
                    self.三类陶瓷电容容量系数[self.电容容量]
            step3 = step1 * step2 * self.表面贴片封装系数["三类陶瓷电容_片式"]

            return step3

        elif self.电容类型 == "铝电解电容":

            step1 = self.铝电解电容基本失效率[self.工作温度] / 1000000 * \
                    self.铝电解电容环境系数[self.环境类型]
            step2 = self.铝电解电容质量等级["B1"] * \
                    self.铝电解电容容量系数[self.电容容量]
            step3 = step1 * step2 * self.表面贴片封装系数["铝电解电容_有引线"]

            return step3
        else:
            print("请从新确认电容类型")

    def __init__(self, 电容类型, 工作温度, 环境类型, 电容容量):

        self.电容类型 = 电容类型
        self.工作温度 = 工作温度
        self.环境类型 = 环境类型
        self.电容容量 = 电容容量

class 二极管_可靠性_模型:
    __稳压_TVS_基本失效率 ={0: 0.060, 5: 0.062, 10: 0.065, 15: 0.067, 20: 0.070, 25: 0.073, 30: 0.077,
                          35: 0.080, 40: 0.084, 45: 0.089, 50: 0.094, 55: 0.100, 60: 0.107, 65: 0.115,
                          70: 0.125, 75: 0.137, 80: 0.152, 85: 0.170, 90: 0.194, 95: 0.224, 100: 0.0264}  # 基于 S = 0.5
    __稳压_TVS_环境系数 = {"GB": 1.0, "GMS": 1.2, "GF1": 1.7, "GF2": 5.0, "GM1": 5.5, "GM2": 11, "MP": 7.5, "NSB": 4.5,
                         "NS1": 3.0, "NS2": 6.0, "NU": 14, "AIF": 13, "AUF": 20, "AIC": 7.0, "AUC": 11, "ARW": 15,
                         "SF": 0.5, "ML": 28, "MF": 15}
    __稳压_TVS_质量系数 ={"A2": 0.03, "A3": 0.05, "A4": 0.1,
                        "A5": 0.2, "B1": 0.5, "B2": 1.0, "C": 5.0}
    __稳压_TVS_应用系数 = {"电压调整": 0.65,
                           "电压基准": 1.0,
                           "电流调整": 1.2}

    __普通锗二极管_基本失效率 = {0: 0.020, 5: 0.024, 10: 0.029, 15: 0.035, 20: 0.042, 25: 0.051, 30: 0.061,
                                35: 0.075, 40: 0.093, 45: 0.118, 50: 0.154, 55: 0.208, 60: 0.298}
    __普通硅二极管_基本失效率 = {0: 0.020, 5: 0.021, 10: 0.023, 15: 0.026, 20: 0.028, 25: 0.030, 30: 0.033,
                                35: 0.036, 40: 0.039, 45: 0.043, 50: 0.047, 55: 0.052, 60: 0.058, 65: 0.064,
                                70: 0.072, 75: 0.082, 80: 0.095, 85: 0.112, 90: 0.134, 95: 0.164, 100: 0.207}
    __普通二极管_环境系数 = {"GB": 1.0, "GMS": 1.2, "GF1": 1.7, "GF2": 5.0, "GM1": 5.5, "GM2": 11, "MP": 7.5, "NSB": 4.5,
                         "NS1": 3.0, "NS2": 6.0, "NU": 14, "AIF": 13, "AUF": 20, "AIC": 7.0, "AUC": 11, "ARW": 15,
                         "SF": 0.5, "ML": 28, "MF": 15}
    __普通二极管质量系数 = {"A2": 0.03, "A3": 0.05, "A4": 0.1,
                            "A5": 0.2, "B1": 0.4, "B2": 1.0, "C": 5.0}
    __普通二极管额定电流系数 = {"小于1A": 1.0, "1A到3A": 1.5,
                                "3A到10A": 2.0, "10A到20A": 3.0, "20A到50A": 4.0,"大于50A":5.0}
    __普通二极管应用系数 = {"小信号检波": 1.0, "逻辑开关": 0.6,
                            "电源整流": 1.5, "功率整流": 2.5}
    __普通二极管电压应力系数 = {0.3: 0.2, 0.4: 0.40, 0.5: 0.70, 0.6: 1.0, 0.7: 1.3, 0.8: 1.8,
                                0.9: 2.5, 1: 3.3}
    __普通二极管结构系数 = {"冶金键合": 1.0,
                            "弹性压力": 2.0}

    __工作温度 = 40
    __工作环境类别 = "GM1"
    __质量系数 = "B1"
    __稳压_TVS_应用场合 = "电压调整"
    __普通二极管应用场合 = "逻辑开关"
    __二极管类型 = "锗二极管"
    __普通二极管额定电流 = "小于1A"
    __普通二极管电压应力 = 0.5
    __普通二极管结构 = "冶金键合"

    def 得到_稳压_TVS_可靠性(self):
        step1 = self.__稳压_TVS_基本失效率[self.__工作温度]/1000000 * \
                self.__稳压_TVS_环境系数[self.__工作环境类别]
        step2 = self.__稳压_TVS_质量系数[self.__质量系数] * self.__稳压_TVS_应用系数[self.__稳压_TVS_应用场合]

        return step1 * step2
    def 得到普通二极管可靠性(self):
        if self.__二极管类型 == "锗二极管":
            step1 = self.__普通锗二极管_基本失效率[self.__工作温度] / 1000000 * \
                    self.__普通二极管_环境系数[self.__工作环境类别]
            step2 = self.__普通二极管质量系数[self.__质量系数] * self.__普通二极管额定电流系数[self.__普通二极管额定电流]

            step3 = self.__普通二极管应用系数[self.__普通二极管应用场合] *  \
                    self.__普通二极管电压应力系数[self.__普通二极管电压应力] * \
                    self.__普通二极管结构系数[self.__普通二极管结构]

            step4 = step1 * step2 * step3

            return  step4
        elif self.__二极管类型 == "硅二极管":
            step1 = self.__普通硅二极管_基本失效率[self.__工作温度] / 1000000 * \
                    self.__普通二极管_环境系数[self.__工作环境类别]
            step2 = self.__普通二极管质量系数[self.__质量系数] * self.__普通二极管额定电流系数[self.__普通二极管额定电流]

            step3 = self.__普通二极管应用系数[self.__普通二极管应用场合] * \
                    self.__普通二极管电压应力系数[self.__普通二极管电压应力] * \
                    self.__普通二极管结构系数[self.__普通二极管结构]

            step4 = step1 * step2 * step3

            return step4
        else:
            print("请确认普通二极管类型")
    def 得到可靠性(self):
        if re.search("TVS", self.__二极管类型):
            return self.得到_稳压_TVS_可靠性()
        elif re.search("稳压", self.__二极管类型):
            return self.得到_稳压_TVS_可靠性()
        else:
            return self.得到普通二极管可靠性()




    def __init__(self, 二极管类型, 工作温度, 工作环境类别, 质量系数, 稳压_TVS_应用场合 = "电压调整", 普通二极管应用场合= "逻辑开关",\
                 普通二极管额定电流 = "小于1A", 普通二极管电压应力 = 0.5, 普通二极管结构 = "冶金键合"):
        self.__二极管类型 = 二极管类型
        self.__工作温度 = 工作温度
        self.__工作环境类别 = 工作环境类别
        self.__质量系数 = 质量系数
        self.__稳压_TVS_应用场合 = 稳压_TVS_应用场合
        self.__普通二极管应用场合 = 普通二极管应用场合
        self.__普通二极管额定电流 = 普通二极管额定电流
        self.__普通二极管电压应力 = 普通二极管电压应力
        self.__普通二极管结构 = 普通二极管结构

class 电感_可靠性_模型:
    线圈电感基本失效率_额定温度90度 = {  25: 0.0060, 30: 0.0067, 35: 0.0076, 40: 0.0086, 45: 0.0099, 50: 0.0115, 55: 0.0134,
                                         60: 0.0159, 65: 0.0190, 70: 0.0229, 75: 0.0280, 80: 0.0346, 85: 0.0433, 90: 0.0548
                                       }
    线圈电感基本失效率_额定温度105度 = {25: 0.0046, 30: 0.0050, 35: 0.0054, 40: 0.0058, 45: 0.0064, 50: 0.0070, 55: 0.0077,
                         60: 0.0085, 65: 0.0095, 70: 0.0106, 75: 0.0119, 80: 0.0135, 85: 0.0155, 90: 0.0177, 95: 0.0205,
                         100: 0.0239, 105: 0.0280
                         }

    线圈电感环境系数 ={"GB": 1.0, "GMS": 1.4, "GF1": 2.0, "GF2": 6.0, "GM1": 8.0, "GM2": 16, "MP": 10, "NSB": 7.0,
                         "NS1": 2.8, "NS2": 8.0, "NU": 17, "AIF": 15, "AUF": 20, "AIC": 12, "AUC": 16, "ARW": 19,
                         "SF": 1.0, "ML": 40, "MF": 15 }
    线圈电感质量系数 ={"A2": 0.3,"B1": 0.6,
                       "B2": 1.0,"C": 3.0}
    线圈电感种类系数 ={"固定和可变小线圈电感器": 1.0, "小功率射频线圈偏转线圈":3.0,
                       "大功率射频线圈": 8.0}
    线圈电感结构系数 ={"固定": 1.0 ,
                        "可变": 2.0}

    片式电感基本失效率 = 0.002 / 1000000


















if __name__ == "__main__":

   a = 电阻可靠性模型("金属","GM1","10m",40)
   print(a.得到可靠性())

















