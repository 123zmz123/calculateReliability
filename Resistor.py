import re
class 电阻可靠性模型:
    __电阻类型 = ""
    __工作温度 = 35
    __电阻值 = 1000
    __质量等级 = ""
    __环境参数 = ""
    #==============合成电阻系列参数==============#
    __合成电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.1, "GF2": 3.5,
                  "GM1": 5.0, "GM2": 6.5, "MP": 5.8, "NSB": 4.0,
                  "NS1": 3.0, "NS2": 5.0, "NU": 10, "AIF": 5.0,
                  "AUF": 10.5, "AIC": 3.8, "AUC": 6.7, "ARW": 11.9,
                  "SF": 1.0, "ML": 25, "MF": 15}  # 合成电阻环境系数
    __合成电阻阻值系数 = {"100K以下": 1.0,
                  "100K到1M": 1.6,
                  "1M到10M": 3.0,
                  "大于10M": 4.5}  # 合成电阻的阻值系数
    __合成电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}
    __合成电阻基本失效率05 = {0: 0.0008, 5: 0.0010, 10: 0.0012, 15: 0.0014, 20: 0.0017,
                     25: 0.0021, 30: 0.0025, 35: 0.0031, 40: 0.0037, 45: 0.0045,
                     50: 0.0054, 55: 0.0066, 60: 0.0079, 65: 0.0096, 70: 0.0116,
                     75: 0.0140, 80: 0.0170, 85: 0.0205, 90: 0.0248, 95: 0.0300,
                     100: 0.0363}

    __合成电阻环境系数结果 = __合成电阻环境系数["GM1"]
    __合成电阻阻值系数结果 = __合成电阻阻值系数["100K以下"]
    __合成电阻质量系数结果 = __合成电阻质量系数["B1"]
    __合成电阻基本失效率结果 = __合成电阻基本失效率05[35]

    def 解析合成电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 <= 100000:
            return "100K以下"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果 <= 1000000:
            return "100K到1M"
        elif 电阻值计算结果 > 1000000 and 电阻值计算结果 <=10000000:
            return "1M到10M"
        elif 电阻值计算结果 > 10000000:
            return "大于10M"
        else:
            return 0
    def 得到合成电阻可靠性(self):
        step1 = self.__合成电阻基本失效率结果/1000000 * \
                self.__合成电阻环境系数结果
        step2 = self.__合成电阻质量系数结果 * self.__合成电阻阻值系数结果

        step3 = step1 * step2

        return step3

    #============金属膜电阻系列参数======================#

    __金属膜电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.8, "GF2": 3.0,
                   "GM1": 4.0, "GM2": 6.0, "MP": 5.6, "NSB": 3.8,
                   "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                   "AUF": 11, "AIC": 2.5, "AUC": 6.1, "ARW": 12.5,
                   "SF": 0.5, "ML": 26, "MF": 15}  # 金属膜电阻环境系数
    __金属膜电阻阻值系数 = {"100K以下": 1.0,
                   "100K到1M": 1.6,
                   "1M到10M": 3.0,
                   "大于10M": 4.5}  # 金属膜电阻的阻值系数
    __金属膜电阻质量系数 = {"A1P": 0.05, "A1M": 0.10, "A2": 0.30, "B1": 0.60, "B2": 1.0, "C": 4.0}
    __金属膜电阻基本失效率05 = {0: 0.0011, 5: 0.0011, 10: 0.0012, 15: 0.0013, 20: 0.0014,
                      25: 0.0015, 30: 0.0016, 35: 0.0017, 40: 0.0019, 45: 0.0020,
                      50: 0.0022, 55: 0.0023, 60: 0.0025, 65: 0.0027, 70: 0.0028,
                      75: 0.0031, 80: 0.0033, 85: 0.0035, 90: 0.0038, 95: 0.0040,
                      100: 0.0043}

    __金属膜电阻环境系数结果 = __金属膜电阻环境系数["GM1"]
    __金属膜电阻阻值系数结果 = __金属膜电阻阻值系数["100K以下"]
    __金属膜电阻质量系数结果 = __金属膜电阻质量系数["B1"]
    __金属膜电阻基本失效率结果 = __金属膜电阻基本失效率05[35]

    def 得到金属膜电阻可靠性(self):
        step1 = self.__金属膜电阻基本失效率结果/1000000 * \
                self.__金属膜电阻环境系数结果
        step2 = self.__金属膜电阻质量系数结果 * self.__金属膜电阻阻值系数结果

        step3 = step1 * step2

        return step3
    def 解析金属膜电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 <= 100000:
            return "100K以下"
        elif 100000 < 电阻值计算结果 <= 1000000:
            return "100K到1M"
        elif 1000000 < 电阻值计算结果 <=10000000:
            return "1M到10M"
        elif  10000000 < 电阻值计算结果:
            return "大于10M"
        else:
            return 0

    # ===================碳膜电阻系列参数==================================

    __碳膜电阻环境系数 = {"GB": 1.0, "GMS": 1.5, "GF1": 1.8, "GF2": 3.0,
                  "GM1": 4.0, "GM2": 6.0, "MP": 5.6, "NSB": 3.8,
                  "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                  "AUF": 11, "AIC": 2.5, "AUC": 6.1, "ARW": 12.5,
                  "SF": 0.50, "ML": 26, "MF": 15}  # 碳膜电阻环境系数
    __碳膜电阻阻值系数 = {"100K以下": 1.0,
                  "100K到1M": 1.6,
                  "1M到10M": 3.0,
                  "大于10M": 4.2}
    __碳膜电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}
    __碳膜电阻基本失效率05 = {0: 0.0057, 5: 0.0058, 10: 0.0060, 15: 0.0062, 20: 0.0064,
                     25: 0.0067, 30: 0.0069, 35: 0.0072, 40: 0.0074, 45: 0.0074,
                     50: 0.0077, 55: 0.0080, 60: 0.0087, 65: 0.0091, 70: 0.0095,
                     75: 0.010, 80: 0.0105, 85: 0.0110, 90: 0.0116, 95: 0.0122,
                     }

    __碳膜电阻环境系数结果 = __碳膜电阻环境系数["GM1"]
    __碳膜电阻阻值系数结果 = __碳膜电阻阻值系数["100K以下"]
    __碳膜电阻质量系数结果 = __碳膜电阻质量系数["B1"]
    __碳膜电阻基本失效率结果 = __碳膜电阻基本失效率05[35]

    def 得到碳膜电阻可靠性(self):
        step1 = self.__碳膜电阻基本失效率结果/1000000 * \
                self.__碳膜电阻环境系数结果
        step2 = self.__碳膜电阻质量系数结果 * self.__碳膜电阻阻值系数结果

        step3 = step1 * step2
        return step3
    def 解析碳膜电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 <= 100000:
            return "100K以下"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果 <= 1000000:
            return "100K到1M"
        elif 电阻值计算结果 > 1000000 and 电阻值计算结果 <=10000000:
            return "1M到10M"
        elif 电阻值计算结果 > 10000000:
            return "大于10M"
        else:
            return 0
    # ==================线绕电阻系列参数================================#

    __线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.1, "GF2": 3.5,
                  "GM1": 4.5, "GM2": 8.0, "MP": 7.5, "NSB": 4.5,
                  "NS1": 3.0, "NS2": 5.0, "NU": 12, "AIF": 6.0,
                  "AUF": 13, "AIC": 5.6, "AUC": 10.5, "ARW": 14.7,
                  "SF": 1.0, "ML": 34, "MF": 15}  # 线绕电阻环境系数
    __线绕电阻阻值系数 = {"小于10K": 1.0,
                          "10K到100K": 1.5,
                          "100K到1M": 3.5,
                          "1M到10M": 6.0,
                           "大于10M": 8.0}  # 线绕电阻的阻值系数
    __线绕电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}
    __线绕电阻基本失效率05 = {0: 0.0402, 5: 0.0415, 10: 0.0429, 15: 0.0445, 20: 0.0463,
                     25: 0.0484, 30: 0.0508, 35: 0.0537, 40: 0.0570, 45: 0.0610,
                     50: 0.0656, 55: 0.0712, 60: 0.0780, 65: 0.0862, 70: 0.0962,
                     75: 0.1087, 80: 0.1245, 85: 0.1444, 90: 0.1702, 95: 0.2040, 100: 0.2489}
    __线绕电阻种类系数 = {"普通": 1.0,"精密": 2.5}

    __线绕电阻环境系数结果 = __线绕电阻环境系数["GM1"]
    __线绕电阻阻值系数结果 = __线绕电阻阻值系数["10K到100K"]
    __线绕电阻质量系数结果 = __线绕电阻质量系数["B1"]
    __线绕电阻基本失效率结果 = __线绕电阻基本失效率05[35]
    __线绕电阻种类系数结果 = __线绕电阻种类系数["精密"]

    def 得到线绕电阻可靠性(self):
        step1 = self.__线绕电阻基本失效率结果/1000000 * \
                self.__线绕电阻环境系数结果
        step2 = self.__线绕电阻质量系数结果 * self.__线绕电阻阻值系数结果*self.__线绕电阻种类系数结果

        step3 = step1 * step2
        return step3
    def 解析线绕电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 <= 10000:
            return "小于10K"
        elif 电阻值计算结果 > 10000 and 电阻值计算结果 <= 100000:
            return "10K到100K"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果 <=1000000:
            return "100K到1M"
        elif 电阻值计算结果 > 1000000 and 电阻值计算结果 <=10000000:
            return "1M到10M"
        elif 电阻值计算结果 > 10000000:
            return "大于10M"
        else:
            return 0

    # ==================功率线绕电阻器系列参数==========================#

    __功率线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.5, "GF2": 3.0,
                    "GM1": 4.0, "GM2": 6.5, "MP": 6.8, "NSB": 4.2,
                    "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                    "AUF": 12, "AIC": 2.7, "AUC": 6.0, "ARW": 13.6,
                    "SF": 1.0, "ML": 30, "MF": 15}  # 功率线绕电阻环境系数
    __功率线绕电阻阻值系数 = {"100到1K": 1.0,
                    "1K到10K": 1.4,
                    "10K到150K": 2.0,
                    "大于150K": 2.5,
                    }  # 功率线绕电阻的阻值系数
    __功率线绕电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}
    __功率线绕电阻基本失效率05 = {0: 0.0553, 10: 0.0607, 20: 0.0667, 30: 0.0736, 20: 0.0463,
                       25: 0.0484, 30: 0.0508, 35: 0.0537, 40: 0.0570, 45: 0.0610,
                       50: 0.0656, 55: 0.0712, 60: 0.0780, 65: 0.0862, 70: 0.0962,
                       75: 0.1087, 80: 0.1245, 85: 0.1444, 90: 0.1702, 95: 0.2040, 100: 0.2489}

    __功率线绕电阻环境系数结果 = __功率线绕电阻环境系数["GM1"]
    __功率线绕电阻阻值系数结果  = __功率线绕电阻阻值系数["100到1K"]
    __功率线绕电阻质量系数结果 = __功率线绕电阻质量系数["B1"]
    __功率线绕电阻基本失效率结果 = __功率线绕电阻基本失效率05[35]

    def 得到功率线绕电阻可靠性(self):
        step1 = self.__功率线绕电阻基本失效率结果/1000000 * \
                self.__功率线绕电阻环境系数结果
        step2 = self.__功率线绕电阻质量系数结果 * self.__功率线绕电阻阻值系数结果

        step3 = step1 * step2
        return step3
    def 解析功率线绕电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 >= 99 and 电阻值计算结果 <1000:
            return "100到1K"
        elif 电阻值计算结果 >=1000 and 电阻值计算结果 <10000:
            return "1K到10K"
        elif 电阻值计算结果 >= 10000 and 电阻值计算结果 < 150000:
            return "10K到150K"
        elif 电阻值计算结果 >= 150000:
            return "大于150K"
        else:
            return "超出功率线绕电阻_阻值_限值"

    # ================功率非线绕电阻系列参数=============================#
    __功率非线绕电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 1.8, "GF2": 3.0,
                     "GM1": 4.0, "GM2": 6.5, "MP": 6.6, "NSB": 4.0,
                     "NS1": 2.5, "NS2": 4.5, "NU": 10, "AIF": 5.0,
                     "AUF": 12, "AIC": 4.0, "AUC": 9.4, "ARW": 14,
                     "SF": 1.0, "ML": 30, "MF": 15}  # 功率非线绕电阻环境系数
    __功率非线绕电阻阻值系数 = {"10到100": 1.0,
                     "100到10K": 1.2,
                     "10K到100K": 1.7,
                     "100K到1M": 2.4,
                     "1M到10M": 5.0,
                     "大于10M": 7.0
                     }  # 功率非线绕电阻的阻值系数
    __功率非线绕电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1, "C": 4}
    __功率非线绕电阻基本失效率05 = {0: 0.0533, 5: 0.0539, 10: 0.0546, 15: 0.0553, 20: 0.0560,
                        25: 0.0567, 30: 0.0575, 35: 0.0583, 40: 0.0591, 45: 0.0599,
                        50: 0.0608, 55: 0.0617, 60: 0.0626, 65: 0.0635, 70: 0.0645,
                        75: 0.0655, 80: 0.0665}

    __功率非线绕电阻环境系数结果 = __功率非线绕电阻环境系数["GM1"]
    __功率非线绕电阻阻值系数结果  = __功率非线绕电阻阻值系数["10K到100K"]
    __功率非线绕电阻质量系数结果  = __功率非线绕电阻质量系数["B1"]
    __功率非线绕电阻基本失效率结果 = __功率非线绕电阻基本失效率05[35]

    def 得到功率非线绕电阻可靠性(self):
        step1 = self.__功率非线绕电阻基本失效率结果 / 1000000 * \
                self.__功率非线绕电阻环境系数结果
        step2 = self.__功率非线绕电阻质量系数结果 * self.__功率非线绕电阻阻值系数结果

        step3 = step1 * step2
        return step3
    def 解析功率非线绕电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 >9 and 电阻值计算结果 <= 100:
            return "10到100"
        elif 电阻值计算结果 >100 and 电阻值计算结果 <= 10000:
            return "100到10K"
        elif 电阻值计算结果 >10000 and 电阻值计算结果 <= 100000:
            return "10K到100K"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果 <= 1000000:
            return "100K到1M"
        elif 电阻值计算结果 > 1000000 and 电阻值计算结果 <= 10000000:
            return "1M到10M"
        elif 电阻值计算结果 > 10000000:
            return "大于10M"
        else:
            return "功率非线绕电阻阻值超限"




    # =================热敏电阻系列参数==================================#
    __热敏电阻基本失效率all = {0: 0.045, 5: 0.045, 10: 0.045, 15: 0.045, 20: 0.045,
                      25: 0.045, 30: 0.045, 35: 0.045, 40: 0.045, 45: 0.045,
                      50: 0.045, 55: 0.045, 60: 0.045, 65: 0.045, 70: 0.045,
                      75: 0.045, 80: 0.045, 85: 0.045, 90: 0.045, 95: 0.045, 100: 0.045}
    __热敏电阻质量系数 = {"A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1, "C": 5}
    __热敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                  "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                  "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                  "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                  "SF": 1.0, "ML": 35, "MF": 15}  # 热敏电阻环境系数
    __热敏电阻温度系数 = {25: 0.65, 30: 0.7, 35: 0.85, 40: 1.00, 45: 1.15, 55: 1.3, 60: 1.45, 65: 1.6, 70: 1.75,
                          75: 1.9, 80: 2.05, 85: 2.2, 90: 2.35, 95: 2.5, 100: 2.7, 105: 2.9, 110: 3.1, 115: 3.5,
                          120: 4.0, 125: 4.5 } # 热敏电阻的工作温度与所对应的系数

    __热敏电阻基本失效率结果 = __热敏电阻基本失效率all[35]
    __热敏电阻质量系数结果  = __热敏电阻质量系数["B1"]
    __热敏电阻环境系数结果 = __热敏电阻环境系数["GM1"]
    __热敏电阻温度系数结果  = __热敏电阻温度系数[35]

    def 得到热敏电阻可靠性(self):
        step1 = self.__热敏电阻基本失效率结果/1000000 * \
                self.__热敏电阻环境系数结果
        step2 = self.__热敏电阻质量系数结果 * self.__热敏电阻温度系数结果
        step3 = step1 * step2
        return step3

    #====================压敏电阻系列参数=====================================#
    __压敏电阻基本失效率all = {0: 0.04, 5: 0.04, 10: 0.04, 15: 0.04, 20: 0.04,
                      25: 0.04, 30: 0.04, 35: 0.04, 40: 0.04, 45: 0.04,
                      50: 0.04, 55: 0.04, 60: 0.04, 65: 0.04, 70: 0.04,
                      75: 0.04, 80: 0.04, 85: 0.04, 90: 0.04, 95: 0.04, 100: 0.04}
    __压敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                  "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                  "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                  "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                  "SF": 1.0, "ML": 35, "MF": 15}
    __压敏电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}
    __压敏电阻温度系数 = {25: 0.6, 30: 0.65, 35: 0.80, 40: 1.00, 45: 1.15, 55: 1.3, 60: 1.45, 65: 1.6, 70: 1.75,
                  75: 1.9, 80: 2.05, 85: 2.2, 90: 2.35, 95: 2.5, 100: 2.7, 105: 2.9, 110: 3.1, 115: 3.5,
                  120: 4.0, 125: 4.5}

    __压敏电阻基本失效率结果 = __压敏电阻基本失效率all[35]
    __压敏电阻环境系数结果  = __压敏电阻环境系数["GM1"]
    __压敏电阻质量系数结果 = __压敏电阻质量系数["B1"]
    __压敏电阻温度系数结果  = __压敏电阻温度系数[35]

    def 得到压敏电阻可靠性(self):
        step1 = self.__压敏电阻基本失效率结果/1000000 * \
                self.__压敏电阻环境系数结果
        step2 = self.__压敏电阻质量系数结果 * self.__压敏电阻温度系数结果
        step3 = step1 * step2
        return step3

    # ====================光敏电阻系列参数======================================#
    __光敏电阻基本失效率all = {0: 0.09, 5: 0.09, 10: 0.09, 15: 0.09, 20: 0.09,
                      25: 0.09, 30: 0.09, 35: 0.09, 40: 0.09, 45: 0.09,
                      50: 0.09, 55: 0.09, 60: 0.09, 65: 0.09, 70: 0.09,
                      75: 0.09, 80: 0.09, 85: 0.09, 90: 0.09, 95: 0.09, 100: 0.09}
    __光敏电阻环境系数 = {"GB": 1.0, "GMS": 1.3, "GF1": 2.5, "GF2": 4.5,
                  "GM1": 6.0, "GM2": 7.8, "MP": 6.9, "NSB": 5.0,
                  "NS1": 3.2, "NS2": 7.0, "NU": 9.6, "AIF": 7.5,
                  "AUF": 12, "AIC": 3.2, "AUC": 4.6, "ARW": 20,
                  "SF": 1.0, "ML": 35, "MF": 15}  # 光敏电阻环境系数
    __光敏电阻质量系数 = {"A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}
    __光敏电阻温度系数 = {25: 0.6, 30: 0.65, 35: 0.80, 40: 1.00, 45: 1.15, 55: 1.3, 60: 1.45, 65: 1.6, 70: 1.75,
                  75: 1.9, 80: 2.05, 85: 2.2, 90: 2.35, 95: 2.5, 100: 2.7, 105: 2.9, 110: 3.1, 115: 3.5,
                  120: 4.0, 125: 4.5}

    __光敏电阻基本失效率结果 = __光敏电阻基本失效率all[35]
    __光敏电阻环境系数结果 = __光敏电阻环境系数["GM1"]
    __光敏电阻质量系数结果 = __光敏电阻质量系数["B1"]
    __光敏电阻温度系数结果 = __光敏电阻温度系数[35]

    def 得到光敏电阻可靠性(self):
        step1 = self.__光敏电阻基本失效率结果/1000000 * \
                self.__光敏电阻环境系数结果
        step2 = self.__光敏电阻质量系数结果 * self.__光敏电阻温度系数结果
        step3 = step1 * step2
        return step3

    # ==================片式膜电阻器系列参数 ==================================#

    __片式膜电阻环境系数 = {"GB": 1.0, "GMS": 1.1, "GF1": 2.0, "GF2": 3.2,
                   "GM1": 5.2, "GM2": 6.7, "MP": 6.1, "NSB": 4.5,
                   "NS1": 2.8, "NS2": 5.0, "NU": 10, "AIF": 6.6,
                   "AUF": 11.5, "AIC": 3.4, "AUC": 6.4, "ARW": 14.3,
                   "SF": 0.5, "ML": 29, "MF": 15}  # 片式膜电阻环境系数
    __片式膜电阻阻值系数 = {"小于100K": 1.0,
                   "100K到1M": 1.6,
                   "大于1M": 2.0,

                   }  # 片式膜电阻的阻值系数
    __片式膜电阻质量系数 = {"A1P": 0.05, "A1M": 0.1, "A2": 0.3, "B1": 0.6, "B2": 1.0, "C": 5.0}
    __片式膜电阻基本失效率all = {0: 0.007, 5: 0.007, 10: 0.007, 15: 0.007, 20: 0.007,
                       25: 0.007, 30: 0.007, 35: 0.007, 40: 0.007, 45: 0.007,
                       50: 0.007, 55: 0.007, 60: 0.007, 65: 0.007, 70: 0.007,
                       75: 0.007, 80: 0.007, 85: 0.007, 90: 0.007, 95: 0.007, 100: 0.007}

    __片式膜电阻基本失效率结果 = __片式膜电阻基本失效率all[35]
    __片式膜电阻环境系数结果 = __片式膜电阻环境系数["GM1"]
    __片式膜电阻质量系数结果 = __片式膜电阻质量系数["B1"]
    __片式膜电阻阻值系数结果 = __片式膜电阻阻值系数["小于100K"]
    def 解析片式膜电阻阻值系数(self,电阻值计算结果):
        if 电阻值计算结果 <= 100000:
            return "小于100K"
        elif 电阻值计算结果 > 100000 and 电阻值计算结果 <= 1000000:
            return "100K到1M"
        elif 电阻值计算结果 >1000000:
            return "大于1M"
        else:
            return False

    def 得到片式膜电阻可靠性(self):
        step1 = self.__片式膜电阻基本失效率结果 / 1000000 * \
                self.__片式膜电阻环境系数结果
        step2 = self.__片式膜电阻质量系数结果 * self.__片式膜电阻阻值系数结果

        step3 = step1 * step2
        return step3

    def __解析阻值(self,用户输入电阻值):
        if re.search("k",用户输入电阻值) or re.search('K',用户输入电阻值):
            电阻值计算结果 = int(re.match(r'\d+',用户输入电阻值).group())*1000

        elif re.search("m",用户输入电阻值) or re.search('M',用户输入电阻值):
            电阻值计算结果 = int(re.match(r'\d+',用户输入电阻值).group())*1000000
        else:
            电阻值计算结果 = int(re.match(r'\d+',用户输入电阻值).group())

        return 电阻值计算结果

    def __解析电阻类型(self,用户输入电阻类型):
        if re.search("合",str(用户输入电阻类型)):
            return "合成电阻"
        elif re.search("金",str(用户输入电阻类型)):
            return "金属膜电阻"
        elif re.search("碳",str(用户输入电阻类型)):
            return "碳膜电阻"

        elif re.search("线绕",str(用户输入电阻类型)):
            if re.search("非",str(用户输入电阻类型)) and re.search("功率",str(用户输入电阻类型)):
                return "功率非线绕电阻"
            elif re.search("功率",str(用户输入电阻类型)):
                return "功率线绕电阻"
            elif re.search("普通",str(用户输入电阻类型)):
                return "普通线绕电阻"
            elif re.search("精密",str(用户输入电阻类型)):
                return "精密线绕电阻"
            else:
                print("线绕电阻解析失败请查找是否未明确线绕电阻的类型，如 精密线绕电阻 普通线绕电阻")

        elif re.search("热",str(用户输入电阻类型)):
            return "热敏电阻"
        elif re.search("光",str(用户输入电阻类型)):
            return "光敏电阻"
        elif re.search("压",str(用户输入电阻类型)):
            return "压敏电阻"
        elif re.search("片",str(用户输入电阻类型)):
            return "片式膜电阻"
        else:
            return "解析电阻类型失败"

    def 得到可靠性(self):
        if self.__电阻类型 == "合成电阻":
            self.__合成电阻基本失效率结果 = self.__合成电阻基本失效率05[self.__工作温度]
            self.__合成电阻阻值系数结果 = self.__合成电阻阻值系数[self.解析合成电阻阻值系数(self.__电阻值)]
            self.__合成电阻质量系数结果 = self.__合成电阻质量系数[self.__质量等级]
            self.__合成电阻环境系数结果 = self.__合成电阻环境系数[self.__环境参数]
            return self.得到合成电阻可靠性()
        elif self.__电阻类型 == "金属膜电阻":
            self.__金属膜电阻基本失效率结果 = self.__金属膜电阻基本失效率05[self.__工作温度]
            self.__金属膜电阻阻值系数结果 = self.__金属膜电阻阻值系数[self.解析金属膜电阻阻值系数(self.__电阻值)]
            self.__金属膜电阻质量系数结果 = self.__金属膜电阻质量系数[self.__质量等级]
            self.__金属膜电阻环境系数结果 = self.__金属膜电阻环境系数[self.__环境参数]
            return self.得到金属膜电阻可靠性()
        elif self.__电阻类型 == "碳膜电阻":
            self.__碳膜电阻基本失效率结果 = self.__碳膜电阻基本失效率05[self.__工作温度]
            self.__碳膜电阻阻值系数结果 = self.__碳膜电阻阻值系数[self.解析碳膜电阻阻值系数(self.__电阻值)]
            self.__碳膜电阻质量系数结果 = self.__碳膜电阻质量系数[self.__质量等级]
            self.__碳膜电阻环境系数结果 = self.__碳膜电阻环境系数[self.__环境参数]
            return self.得到碳膜电阻可靠性()
        elif self.__电阻类型 == "功率非线绕电阻":
            self.__功率非线绕电阻阻值系数结果 = self.__功率非线绕电阻阻值系数[self.解析功率非线绕电阻阻值系数(self.__电阻值)]
            self.__功率非线绕电阻质量系数结果 = self.__功率非线绕电阻质量系数[self.__质量等级]
            self.__功率非线绕电阻环境系数结果 = self.__功率非线绕电阻环境系数[self.__环境参数]
            self.__功率非线绕电阻基本失效率结果 = self.__功率非线绕电阻基本失效率05[self.__工作温度]
            return self.得到功率非线绕电阻可靠性()
        elif self.__电阻类型 == "功率线绕电阻":
            self.__功率线绕电阻基本失效率结果 = self.__功率线绕电阻基本失效率05[self.__工作温度]
            self.__功率线绕电阻阻值系数结果 = self.__功率线绕电阻阻值系数[self.解析功率线绕电阻阻值系数(self.__电阻值)]
            self.__功率线绕电阻质量系数结果 = self.__功率线绕电阻质量系数[self.__质量等级]
            self.__功率线绕电阻环境系数结果 = self.__功率线绕电阻环境系数[self.__环境参数]
            return  self.得到功率线绕电阻可靠性()
        elif self.__电阻类型 == "普通线绕电阻":
            self.__线绕电阻基本失效率结果 = self.__线绕电阻基本失效率05[self.__工作温度]
            self.__线绕电阻种类系数结果 = self.__线绕电阻种类系数["普通"]
            self.__线绕电阻阻值系数结果 = self.__线绕电阻阻值系数[self.解析线绕电阻阻值系数(self.__电阻值)]
            self.__线绕电阻质量系数结果 = self.__线绕电阻质量系数[self.__质量等级]
            self.__线绕电阻环境系数结果 = self.__线绕电阻环境系数[self.__环境参数]
            return  self.得到线绕电阻可靠性()
        elif self.__电阻类型 == "精密线绕电阻":
            self.__线绕电阻基本失效率结果 = self.__线绕电阻基本失效率05[self.__工作温度]
            self.__线绕电阻种类系数结果 = self.__线绕电阻种类系数["精密"]
            self.__线绕电阻阻值系数结果 = self.__线绕电阻阻值系数[self.解析线绕电阻阻值系数(self.__电阻值)]
            self.__线绕电阻质量系数结果 = self.__线绕电阻质量系数[self.__质量等级]
            self.__线绕电阻环境系数结果 = self.__线绕电阻环境系数[self.__环境参数]
            return  self.得到线绕电阻可靠性()
        elif self.__电阻类型 == "热敏电阻":
            self.__热敏电阻温度系数结果 = self.__热敏电阻温度系数[self.__工作温度]
            self.__热敏电阻质量系数结果 = self.__热敏电阻质量系数[self.__质量等级]
            self.__热敏电阻环境系数结果 = self.__热敏电阻环境系数[self.__环境参数]
            self.__热敏电阻基本失效率结果 = self.__热敏电阻基本失效率all[self.__工作温度]
            return self.得到热敏电阻可靠性()
        elif self.__电阻类型 == "光敏电阻":
            self.__光敏电阻基本失效率结果 = self.__光敏电阻基本失效率all[self.__工作温度]
            self.__光敏电阻温度系数结果 = self.__光敏电阻温度系数[self.__工作温度]
            self.__光敏电阻环境系数结果 = self.__光敏电阻环境系数[self.__环境参数]
            self.__光敏电阻质量系数结果 = self.__光敏电阻质量系数[self.__质量等级]
            return self.得到光敏电阻可靠性()
        elif self.__电阻类型 == "压敏电阻":
            self.__压敏电阻温度系数结果 = self.__压敏电阻温度系数[self.__工作温度]
            self.__压敏电阻环境系数结果 = self.__压敏电阻环境系数[self.__环境参数]
            self.__压敏电阻质量系数结果 = self.__压敏电阻质量系数[self.__质量等级]
            self.__压敏电阻基本失效率结果 = self.__压敏电阻基本失效率all[self.__工作温度]
            return self.得到压敏电阻可靠性()
        elif self.__电阻类型 == "片式膜电阻":
            self.__片式膜电阻阻值系数结果 = self.__片式膜电阻阻值系数[self.解析片式膜电阻阻值系数(self.__电阻值)]
            self.__片式膜电阻质量系数结果 = self.__片式膜电阻质量系数[self.__质量等级]
            self.__片式膜电阻环境系数结果 = self.__片式膜电阻环境系数[self.__环境参数]
            self.__片式膜电阻基本失效率结果 = self.__片式膜电阻基本失效率all[self.__工作温度]
            return  self.得到片式膜电阻可靠性()

        else:
            print("可靠性计算失败")







    def __init__(self,用户输入电阻类型,用户输入阻值,用户输入工作温度,用户输入环境参数,用户输入质量等级):
        self.__电阻类型 = self.__解析电阻类型(用户输入电阻类型)
        self.__电阻值 = self.__解析阻值(用户输入阻值)
        self.__工作温度 = 用户输入工作温度
        self.__环境参数 = 用户输入环境参数
        self.__质量等级 = 用户输入质量等级
        print("电阻类型为",self.__电阻类型)
        print("电阻值为",self.__电阻值)